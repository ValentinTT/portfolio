---
import About from "../components/Home/About.astro";
import Blog from "../components/Home/Blog.astro";
import Projects from "../components/Home/Projects.astro";
import Technologies from "../components/Home/Technologies.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Valentin TT">
  <About />
  <Technologies />
  <Projects />
  <Blog />
  <script
    src="https://cdn.jsdelivr.net/gh/dixonandmoe/rellax@master/rellax.min.js"
    is:inline></script>
  <script>
    var rellax = new Rellax(".rellax");
  </script>

  <script>
    import { gsap } from "gsap";
    import { ScrollTrigger } from "gsap/ScrollTrigger";
    gsap.registerPlugin(ScrollTrigger);

    const isBlackMode = (element: Element) =>
      element.classList.contains("dark");

    const generateAnimations: (
      isDarkMode: boolean
    ) => globalThis.ScrollTrigger[] = (isDarkMode) => {
      return gsap.utils.toArray("section").map((elem) => {
        let color =
          (elem as Element).getAttribute(
            isDarkMode ? "data-color-dark" : "data-color"
          ) ??
          (elem as Element).getAttribute(
            !isDarkMode ? "data-color-dark" : "data-color"
          ) ??
          "#fff";

        return ScrollTrigger.create({
          trigger: elem as Element,
          start: "top 50%",
          end: "bottom 50%",
          onEnter: () =>
            gsap.to("body", {
              backgroundColor: color,
              duration: 1,
            }),
          onEnterBack: () =>
            gsap.to("body", {
              backgroundColor: color,
              duration: 1,
            }),
        });
      });
    };

    // Observer for the <html> element, in case there is a class name change
    const htmlElement = document.getElementsByTagName("html")[0];
    let currentModeIsBlack = isBlackMode(htmlElement);

    //To cancel the animations when there is a theme change
    let backgroundColorAnimations: globalThis.ScrollTrigger[] =
      generateAnimations(currentModeIsBlack);
    const observer = new MutationObserver((mutationsList, observer) => {
      for (let mutation of mutationsList) {
        if (
          mutation.type === "attributes" &&
          mutation.attributeName === "class"
        ) {
          if (currentModeIsBlack === isBlackMode(htmlElement)) continue;
          currentModeIsBlack = !currentModeIsBlack;
          backgroundColorAnimations.map((animation) => animation.kill());
          backgroundColorAnimations = generateAnimations(currentModeIsBlack);
        }
      }
    });
    const config = { attributes: true, attributeFilter: ["class"] };
    observer.observe(htmlElement, config);
  </script>
</Layout>
